/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/admin/role": {
    post: {
      parameters?: {
        query?: {
          playerId?: string;
          role?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
    delete: {
      parameters?: {
        query?: {
          playerId?: string;
          role?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/admin/clan/{id}/setLeader": {
    post: {
      parameters: {
        query?: {
          newLeader?: string;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/admin/clan/{id}/addMember": {
    post: {
      parameters: {
        query?: {
          newLeader?: string;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/admin/allScores": {
    get: {
      parameters?: {
        query?: {
          from?: number;
          to?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["Score"])[];
            "application/json": (components["schemas"]["Score"])[];
            "text/json": (components["schemas"]["Score"])[];
          };
        };
      };
    };
  };
  "/admin/recalculateLeaderboardTimestamps": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardTimestampsRecalculationResult"];
            "application/json": components["schemas"]["LeaderboardTimestampsRecalculationResult"];
            "text/json": components["schemas"]["LeaderboardTimestampsRecalculationResult"];
          };
        };
      };
    };
  };
  "/admin/recalculateLeaderboardGroups": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardGroupsRecalculationResult"];
            "application/json": components["schemas"]["LeaderboardGroupsRecalculationResult"];
            "text/json": components["schemas"]["LeaderboardGroupsRecalculationResult"];
          };
        };
      };
    };
  };
  "/admin/migrateDurations": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/admin/migrateCDN": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/admin/migrateMappers": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/admin/playerHistory/{id}": {
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/admin/unlinkbeatsaver": {
    delete: {
      parameters?: {
        query?: {
          beatSaverId?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/admin/playerHistory/time/{time}": {
    delete: {
      parameters: {
        path: {
          time: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/admin/map/refresh": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/signin": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
    post: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            provider?: string;
            returnUrl?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/signin/approve": {
    post: {
      parameters?: {
        query?: {
          leaderboardId?: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            returnUrl?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/signinmigrate": {
    post: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            provider?: string;
            returnUrl?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/steamcallback": {
    get: {
      parameters?: {
        query?: {
          ReturnUrl?: string;
          Random?: number;
          migrateTo?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/signinmigrate/oculuspc": {
    post: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            provider?: string;
            returnUrl?: string;
            token?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/signinoculus": {
    post: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/signinoculus/oculuspc": {
    post: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            token?: string;
            returnUrl?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/signout": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
    post: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/linkBeatSaverAndApprove": {
    get: {
      parameters?: {
        query?: {
          leaderboardId?: string;
          returnUrl?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/approveQualification": {
    get: {
      parameters?: {
        query?: {
          leaderboardId?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/linkBeatSaver": {
    get: {
      parameters?: {
        query?: {
          returnUrl?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/beatsaver/refresh": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/clans": {
    get: {
      parameters?: {
        query?: {
          page?: number;
          count?: number;
          sort?: string;
          order?: string;
          search?: string;
          type?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ClanResponseWithMetadata"];
            "application/json": components["schemas"]["ClanResponseWithMetadata"];
            "text/json": components["schemas"]["ClanResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/clan/{tag}": {
    get: {
      parameters: {
        query?: {
          page?: number;
          count?: number;
          sort?: string;
          order?: string;
          search?: string;
          type?: string;
        };
        path: {
          tag: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PlayerResponseClanResponseWithMetadataAndContainer"];
            "application/json": components["schemas"]["PlayerResponseClanResponseWithMetadataAndContainer"];
            "text/json": components["schemas"]["PlayerResponseClanResponseWithMetadataAndContainer"];
          };
        };
      };
    };
  };
  "/clan/create": {
    post: {
      parameters?: {
        query?: {
          name?: string;
          tag?: string;
          color?: string;
          description?: string;
          bio?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Clan"];
            "application/json": components["schemas"]["Clan"];
            "text/json": components["schemas"]["Clan"];
          };
        };
      };
    };
  };
  "/clan": {
    put: {
      parameters?: {
        query?: {
          id?: string;
          name?: string;
          color?: string;
          description?: string;
          bio?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
    delete: {
      parameters?: {
        query?: {
          id?: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/clan/invite": {
    post: {
      parameters?: {
        query?: {
          player?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/clan/cancelinvite": {
    post: {
      parameters?: {
        query?: {
          player?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/clan/kickplayer": {
    post: {
      parameters?: {
        query?: {
          player?: string;
          id?: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/clan/accept": {
    post: {
      parameters?: {
        query?: {
          id?: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/clan/reject": {
    post: {
      parameters?: {
        query?: {
          id?: number;
          ban?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/clan/unban": {
    post: {
      parameters?: {
        query?: {
          id?: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/clan/leave": {
    post: {
      parameters?: {
        query?: {
          id?: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/clan/reserve": {
    post: {
      parameters?: {
        query?: {
          tag?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
    delete: {
      parameters?: {
        query?: {
          tag?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/id": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/user": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["UserReturn"];
            "application/json": components["schemas"]["UserReturn"];
            "text/json": components["schemas"]["UserReturn"];
          };
        };
      };
    };
    patch: {
      parameters?: {
        query?: {
          name?: string;
          country?: string;
          profileAppearance?: string;
          message?: string;
          hue?: number;
          saturation?: number;
          effectName?: string;
          leftSaberColor?: string;
          rightSaberColor?: string;
          id?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/modinterface": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PlayerResponseWithFriends"];
            "application/json": components["schemas"]["PlayerResponseWithFriends"];
            "text/json": components["schemas"]["PlayerResponseWithFriends"];
          };
        };
      };
    };
  };
  "/user/friend": {
    post: {
      parameters?: {
        query?: {
          playerId?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
    delete: {
      parameters?: {
        query?: {
          playerId?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/avatar": {
    patch: {
      parameters?: {
        query?: {
          id?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/name": {
    patch: {
      parameters?: {
        query?: {
          newName?: string;
          id?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/country": {
    patch: {
      parameters?: {
        query?: {
          newCountry?: string;
          id?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/changePassword": {
    patch: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            login?: string;
            oldPassword?: string;
            newPassword?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/resetPassword": {
    patch: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            login?: string;
            newPassword?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/changeLogin": {
    patch: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            newLogin?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/migrate": {
    post: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            login?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
  };
  "/user/migrateoculuspc": {
    get: {
      parameters?: {
        query?: {
          ReturnUrl?: string;
          Token?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
  };
  "/user/failedscores": {
    get: {
      parameters?: {
        query?: {
          page?: number;
          count?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["FailedScoreResponseWithMetadata"];
            "application/json": components["schemas"]["FailedScoreResponseWithMetadata"];
            "text/json": components["schemas"]["FailedScoreResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/user/failedscore/remove": {
    post: {
      parameters?: {
        query?: {
          id?: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/failedscore/retry": {
    post: {
      parameters?: {
        query?: {
          id?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ScoreResponse"];
            "application/json": components["schemas"]["ScoreResponse"];
            "text/json": components["schemas"]["ScoreResponse"];
          };
        };
      };
    };
  };
  "/players/avatarsrefresh": {
    get: {
      parameters?: {
        query?: {
          hundred?: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/ban": {
    post: {
      parameters?: {
        query?: {
          id?: string;
          reason?: string;
          duration?: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/unban": {
    post: {
      parameters?: {
        query?: {
          id?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/leaderboard/{id}": {
    get: {
      parameters: {
        query?: {
          page?: number;
          count?: number;
          countries?: string;
          friends?: boolean;
          voters?: boolean;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardResponse"];
            "application/json": components["schemas"]["LeaderboardResponse"];
            "text/json": components["schemas"]["LeaderboardResponse"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/leaderboards/hash/{hash}": {
    get: {
      parameters: {
        path: {
          hash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardsResponse"];
            "application/json": components["schemas"]["LeaderboardsResponse"];
            "text/json": components["schemas"]["LeaderboardsResponse"];
          };
        };
      };
    };
  };
  "/leaderboards": {
    get: {
      parameters?: {
        query?: {
          page?: number;
          count?: number;
          sortBy?: string;
          order?: string;
          search?: string;
          type?: string;
          mapType?: number;
          allTypes?: number;
          mytype?: string;
          stars_from?: number;
          stars_to?: number;
          date_from?: number;
          date_to?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardInfoResponseResponseWithMetadata"];
            "application/json": components["schemas"]["LeaderboardInfoResponseResponseWithMetadata"];
            "text/json": components["schemas"]["LeaderboardInfoResponseResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/leaderboards/refresh": {
    get: {
      parameters?: {
        query?: {
          id?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/leaderboard/ranking/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["LeaderboardVoting"];
            "application/json": components["schemas"]["LeaderboardVoting"];
            "text/json": components["schemas"]["LeaderboardVoting"];
          };
        };
      };
    };
  };
  "/leaderboard/statistic/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ScoreStatistic"];
            "application/json": components["schemas"]["ScoreStatistic"];
            "text/json": components["schemas"]["ScoreStatistic"];
          };
        };
      };
    };
  };
  "/minirankings": {
    get: {
      parameters?: {
        query?: {
          rank?: number;
          country?: string;
          countryRank?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["MiniRankingResponse"];
            "application/json": components["schemas"]["MiniRankingResponse"];
            "text/json": components["schemas"]["MiniRankingResponse"];
          };
        };
      };
    };
  };
  "/mod/lastVersions": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ModVersions"];
            "application/json": components["schemas"]["ModVersions"];
            "text/json": components["schemas"]["ModVersions"];
          };
        };
      };
    };
  };
  "/servername": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/modifiers": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": {
              [key: string]: number | undefined;
            };
            "application/json": {
              [key: string]: number | undefined;
            };
            "text/json": {
              [key: string]: number | undefined;
            };
          };
        };
      };
    };
  };
  "/user/linkPatreon": {
    get: {
      parameters?: {
        query?: {
          returnUrl?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/refreshPatreon": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/player/{id}": {
    get: {
      parameters: {
        query?: {
          stats?: boolean;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PlayerResponseFull"];
            "application/json": components["schemas"]["PlayerResponseFull"];
            "text/json": components["schemas"]["PlayerResponseFull"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/playerlink/{login}": {
    get: {
      parameters: {
        path: {
          login: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["AccountLink"];
            "application/json": components["schemas"]["AccountLink"];
            "text/json": components["schemas"]["AccountLink"];
          };
        };
      };
    };
  };
  "/authinfo/{login}": {
    delete: {
      parameters: {
        path: {
          login: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/authips": {
    delete: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/playerlink/{id}": {
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/players": {
    get: {
      parameters?: {
        query?: {
          sortBy?: string;
          page?: number;
          count?: number;
          search?: string;
          order?: string;
          countries?: string;
          mapsType?: string;
          friends?: boolean;
          pp_range?: string;
          score_range?: string;
          platform?: string;
          role?: string;
          hmd?: string;
          clans?: string;
          activityPeriod?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PlayerResponseWithStatsResponseWithMetadata"];
            "application/json": components["schemas"]["PlayerResponseWithStatsResponseWithMetadata"];
            "text/json": components["schemas"]["PlayerResponseWithStatsResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/event/{id}/players": {
    get: {
      parameters: {
        query?: {
          sortBy?: string;
          page?: number;
          count?: number;
          search?: string;
          order?: string;
          countries?: string;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PlayerResponseWithStatsResponseWithMetadata"];
            "application/json": components["schemas"]["PlayerResponseWithStatsResponseWithMetadata"];
            "text/json": components["schemas"]["PlayerResponseWithStatsResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/badge": {
    put: {
      parameters?: {
        query?: {
          description?: string;
          image?: string;
          link?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Badge"];
            "application/json": components["schemas"]["Badge"];
            "text/json": components["schemas"]["Badge"];
          };
        };
      };
    };
  };
  "/badge/{id}": {
    put: {
      parameters: {
        query?: {
          description?: string;
          image?: string;
          link?: string;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Badge"];
            "application/json": components["schemas"]["Badge"];
            "text/json": components["schemas"]["Badge"];
          };
        };
      };
    };
  };
  "/player/badge/{playerId}/{badgeId}": {
    put: {
      parameters: {
        path: {
          playerId: string;
          badgeId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Player"];
            "application/json": components["schemas"]["Player"];
            "text/json": components["schemas"]["Player"];
          };
        };
      };
    };
  };
  "/oculususer": {
    get: {
      parameters?: {
        query?: {
          token?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["OculusUser"];
            "application/json": components["schemas"]["OculusUser"];
            "text/json": components["schemas"]["OculusUser"];
          };
        };
      };
    };
  };
  "/players/steam/refresh": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/player/{id}/refresh": {
    get: {
      parameters: {
        query?: {
          refreshRank?: boolean;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/players/leaderboard/{id}/refresh": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/players/refresh": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/players/stats/refresh": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/players/rankrefresh": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/player/{id}/scores": {
    get: {
      parameters: {
        query?: {
          sortBy?: string;
          order?: string;
          page?: number;
          count?: number;
          search?: string;
          diff?: string;
          type?: string;
          stars_from?: number;
          stars_to?: number;
          time_from?: number;
          time_to?: number;
          eventId?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ScoreResponseWithMyScoreResponseWithMetadata"];
            "application/json": components["schemas"]["ScoreResponseWithMyScoreResponseWithMetadata"];
            "text/json": components["schemas"]["ScoreResponseWithMyScoreResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/player/{id}/scores/compact": {
    get: {
      parameters: {
        query?: {
          sortBy?: string;
          order?: string;
          page?: number;
          count?: number;
          search?: string;
          diff?: string;
          type?: string;
          stars_from?: number;
          stars_to?: number;
          time_from?: number;
          time_to?: number;
          eventId?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CompactScoreResponseResponseWithMetadata"];
            "application/json": components["schemas"]["CompactScoreResponseResponseWithMetadata"];
            "text/json": components["schemas"]["CompactScoreResponseResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/player/{id}/score/{leaderboardID}": {
    delete: {
      parameters: {
        path: {
          id: string;
          leaderboardID: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/player/{id}/scorevalue/{hash}/{difficulty}/{mode}": {
    get: {
      parameters: {
        path: {
          id: string;
          hash: string;
          difficulty: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
  };
  "/player/{id}/histogram": {
    get: {
      parameters: {
        query?: {
          sortBy?: string;
          order?: string;
          count?: number;
          search?: string;
          diff?: string;
          type?: string;
          stars_from?: number;
          stars_to?: number;
          batch?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/player/{id}/accgraph": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["GraphResponse"])[];
            "application/json": (components["schemas"]["GraphResponse"])[];
            "text/json": (components["schemas"]["GraphResponse"])[];
          };
        };
      };
    };
  };
  "/player/{id}/history": {
    get: {
      parameters: {
        query?: {
          count?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["PlayerScoreStatsHistory"])[];
            "application/json": (components["schemas"]["PlayerScoreStatsHistory"])[];
            "text/json": (components["schemas"]["PlayerScoreStatsHistory"])[];
          };
        };
      };
    };
  };
  "/player/{id}/pinnedScores": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["ScoreResponseWithMyScore"])[];
            "application/json": (components["schemas"]["ScoreResponseWithMyScore"])[];
            "text/json": (components["schemas"]["ScoreResponseWithMyScore"])[];
          };
        };
      };
    };
  };
  "/user/oneclickplaylist": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
    post: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/oneclickdone": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/playlists": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["Playlist"])[];
            "application/json": (components["schemas"]["Playlist"])[];
            "text/json": (components["schemas"]["Playlist"])[];
          };
        };
      };
    };
  };
  "/playlist/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/playlist/image/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/playlists": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["Playlist"])[];
            "application/json": (components["schemas"]["Playlist"])[];
            "text/json": (components["schemas"]["Playlist"])[];
          };
        };
      };
    };
  };
  "/user/playlist": {
    post: {
      parameters?: {
        query?: {
          id?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
    delete: {
      parameters?: {
        query?: {
          id?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": number;
            "application/json": number;
            "text/json": number;
          };
        };
      };
    };
  };
  "/playlist/refreshranked": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/playlist/refreshnominated": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/playlist/refreshqualified": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/playlist/generate": {
    get: {
      parameters?: {
        query?: {
          count?: number;
          sortBy?: string;
          order?: string;
          search?: string;
          type?: string;
          mapType?: number;
          allTypes?: number;
          mytype?: string;
          stars_from?: number;
          stars_to?: number;
          date_from?: number;
          date_to?: number;
          duplicate_diffs?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": string;
            "application/json": string;
            "text/json": string;
          };
        };
      };
    };
  };
  "/event/start/{id}": {
    post: {
      parameters: {
        query?: {
          name?: string;
          endDate?: number;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/event/{id}/refresh": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/event/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventRanking"];
            "application/json": components["schemas"]["EventRanking"];
            "text/json": components["schemas"]["EventRanking"];
          };
        };
      };
    };
  };
  "/events": {
    get: {
      parameters?: {
        query?: {
          page?: number;
          count?: number;
          sortBy?: string;
          search?: string;
          order?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["EventResponseResponseWithMetadata"];
            "application/json": components["schemas"]["EventResponseResponseWithMetadata"];
            "text/json": components["schemas"]["EventResponseResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/preview/replay": {
    get: {
      parameters?: {
        query?: {
          playerID?: string;
          id?: string;
          difficulty?: string;
          mode?: string;
          scoreId?: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/preview/royale": {
    get: {
      parameters?: {
        query?: {
          players?: string;
          hash?: string;
          difficulty?: string;
          mode?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/votestatus/{hash}/{diff}/{mode}": {
    get: {
      parameters: {
        query?: {
          player?: string;
        };
        path: {
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["VoteStatus"];
            "application/json": components["schemas"]["VoteStatus"];
            "text/json": components["schemas"]["VoteStatus"];
          };
        };
      };
    };
  };
  "/vote/{hash}/{diff}/{mode}": {
    post: {
      parameters: {
        query?: {
          rankability?: number;
          stars?: string;
          type?: number;
        };
        path: {
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["VoteStatus"];
            "application/json": components["schemas"]["VoteStatus"];
            "text/json": components["schemas"]["VoteStatus"];
          };
        };
      };
    };
  };
  "/vote/steam/{hash}/{diff}/{mode}": {
    post: {
      parameters: {
        query?: {
          ticket?: string;
          rankability?: number;
          stars?: string;
          type?: number;
        };
        path: {
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["VoteStatus"];
            "application/json": components["schemas"]["VoteStatus"];
            "text/json": components["schemas"]["VoteStatus"];
          };
        };
      };
    };
  };
  "/votefeedback": {
    post: {
      parameters?: {
        query?: {
          scoreId?: number;
          value?: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/qualify/{hash}/{diff}/{mode}": {
    post: {
      parameters: {
        query?: {
          stars?: number;
          type?: number;
          modifiers?: string;
        };
        path: {
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/qualification/{hash}/{diff}/{mode}": {
    post: {
      parameters: {
        query?: {
          stilQualifying?: boolean;
          stars?: number;
          type?: number;
          allowed?: boolean;
          criteriaCheck?: number;
          criteriaCommentary?: string;
          modifiers?: string;
        };
        path: {
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/reweight/{hash}/{diff}/{mode}": {
    post: {
      parameters: {
        query?: {
          keep?: boolean;
          stars?: number;
          type?: number;
          criteriaCheck?: number;
          criteriaCommentary?: string;
          modifiers?: string;
        };
        path: {
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/reweight/approve/{hash}/{diff}/{mode}": {
    post: {
      parameters: {
        path: {
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/reweight/cancel/{hash}/{diff}/{mode}": {
    post: {
      parameters: {
        path: {
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/rank/{hash}/{diff}/{mode}": {
    post: {
      parameters: {
        query?: {
          rankability?: number;
          stars?: number;
          type?: number;
        };
        path: {
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/prevQualTime/{hash}": {
    get: {
      parameters: {
        path: {
          hash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PrevQualification"];
            "application/json": components["schemas"]["PrevQualification"];
            "text/json": components["schemas"]["PrevQualification"];
          };
        };
      };
    };
  };
  "/rankabunch": {
    post: {
      requestBody?: {
        content: {
          "application/json": {
            [key: string]: number | undefined;
          };
          "text/json": {
            [key: string]: number | undefined;
          };
          "application/*+json": {
            [key: string]: number | undefined;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/voting/spread": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": {
              [key: string]: number | undefined;
            };
            "application/json": {
              [key: string]: number | undefined;
            };
            "text/json": {
              [key: string]: number | undefined;
            };
          };
        };
      };
    };
  };
  "/grantRTJunior/{playerId}": {
    get: {
      parameters: {
        path: {
          playerId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/removeRTJunior/{playerId}": {
    get: {
      parameters: {
        path: {
          playerId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/replay": {
    post: {
      parameters?: {
        query?: {
          ticket?: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ScoreResponse"];
            "application/json": components["schemas"]["ScoreResponse"];
            "text/json": components["schemas"]["ScoreResponse"];
          };
        };
      };
    };
  };
  "/replayoculus": {
    put: {
      parameters?: {
        query?: {
          time?: number;
          type?: components["schemas"]["EndType"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ScoreResponse"];
            "application/json": components["schemas"]["ScoreResponse"];
            "text/json": components["schemas"]["ScoreResponse"];
          };
        };
      };
    };
  };
  "/replay/{name}": {
    get: {
      parameters: {
        path: {
          name: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/player/{id}/restore": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/score/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Score"];
            "application/json": components["schemas"]["Score"];
            "text/json": components["schemas"]["Score"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/score/random": {
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Score"];
            "application/json": components["schemas"]["Score"];
            "text/json": components["schemas"]["Score"];
          };
        };
      };
    };
  };
  "/v4/scores/{hash}/{diff}/{mode}": {
    get: {
      parameters: {
        query?: {
          page?: number;
          count?: number;
        };
        path: {
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["SaverScoreResponseResponseWithMetadata"];
            "application/json": components["schemas"]["SaverScoreResponseResponseWithMetadata"];
            "text/json": components["schemas"]["SaverScoreResponseResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/v3/scores/{hash}/{diff}/{mode}/{context}/{scope}/{method}": {
    get: {
      parameters: {
        query?: {
          player?: string;
          page?: number;
          count?: number;
        };
        path: {
          hash: string;
          diff: string;
          mode: string;
          context: string;
          scope: string;
          method: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ScoreResponseResponseWithMetadataAndSelection"];
            "application/json": components["schemas"]["ScoreResponseResponseWithMetadataAndSelection"];
            "text/json": components["schemas"]["ScoreResponseResponseWithMetadataAndSelection"];
          };
        };
      };
    };
  };
  "/score/{playerID}/{hash}/{diff}/{mode}": {
    get: {
      parameters: {
        path: {
          playerID: string;
          hash: string;
          diff: string;
          mode: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Score"];
            "application/json": components["schemas"]["Score"];
            "text/json": components["schemas"]["Score"];
          };
        };
      };
    };
  };
  "/user/friendScores": {
    get: {
      parameters?: {
        query?: {
          id?: string;
          sortBy?: string;
          order?: string;
          page?: number;
          count?: number;
          search?: string;
          diff?: string;
          type?: string;
          stars_from?: number;
          stars_to?: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ScoreResponseWithMyScoreResponseWithMetadata"];
            "application/json": components["schemas"]["ScoreResponseWithMyScoreResponseWithMetadata"];
            "text/json": components["schemas"]["ScoreResponseWithMyScoreResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/score/statistic/{id}": {
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/score/calculatestatistic/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ScoreStatistic"];
            "application/json": components["schemas"]["ScoreStatistic"];
            "text/json": components["schemas"]["ScoreStatistic"];
          };
        };
      };
    };
  };
  "/score/{id}/pin": {
    put: {
      parameters: {
        query?: {
          pin?: boolean;
          description?: string;
          link?: string;
          priority?: number;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ScoreMetadata"];
            "application/json": components["schemas"]["ScoreMetadata"];
            "text/json": components["schemas"]["ScoreMetadata"];
          };
        };
      };
    };
  };
  "/modifiers/update": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/scores/refresh": {
    get: {
      parameters?: {
        query?: {
          leaderboardId?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/linkTwitch": {
    get: {
      parameters?: {
        query?: {
          returnUrl?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/linkTwitter": {
    get: {
      parameters?: {
        query?: {
          returnUrl?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/linkGoogle": {
    get: {
      parameters?: {
        query?: {
          returnUrl?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/user/unlink": {
    post: {
      requestBody?: {
        content: {
          "multipart/form-data": {
            provider?: string;
            returnUrl?: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/map/hash/{hash}": {
    get: {
      parameters: {
        path: {
          hash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["Song"];
            "application/json": components["schemas"]["Song"];
            "text/json": components["schemas"]["Song"];
          };
        };
      };
    };
  };
  "/map/modinterface/{hash}": {
    get: {
      parameters: {
        path: {
          hash: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": (components["schemas"]["DiffModResponse"])[];
            "application/json": (components["schemas"]["DiffModResponse"])[];
            "text/json": (components["schemas"]["DiffModResponse"])[];
          };
        };
      };
    };
  };
  "/player/{id}/scoresstats": {
    get: {
      parameters: {
        query?: {
          sortBy?: string;
          order?: string;
          page?: number;
          count?: number;
          search?: string;
          diff?: string;
          type?: components["schemas"]["EndType"];
          stars_from?: number;
          stars_to?: number;
          eventId?: number;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["PlayerLeaderboardStatsResponseWithMetadata"];
            "application/json": components["schemas"]["PlayerLeaderboardStatsResponseWithMetadata"];
            "text/json": components["schemas"]["PlayerLeaderboardStatsResponseWithMetadata"];
          };
        };
      };
    };
  };
  "/watched/{scoreId}": {
    get: {
      parameters: {
        path: {
          scoreId: number;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["VoteStatus"];
            "application/json": components["schemas"]["VoteStatus"];
            "text/json": components["schemas"]["VoteStatus"];
          };
        };
      };
    };
  };
  "/unicode/{name}": {
    get: {
      parameters: {
        path: {
          name: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AccountLink: {
      /** Format: int32 */
      id?: number;
      steamID?: string | null;
      /** Format: int32 */
      oculusID?: number;
      pcOculusID?: string | null;
    };
    AccuracyTracker: {
      /** Format: float */
      accRight?: number;
      /** Format: float */
      accLeft?: number;
      /** Format: float */
      leftPreswing?: number;
      /** Format: float */
      rightPreswing?: number;
      /** Format: float */
      averagePreswing?: number;
      /** Format: float */
      leftPostswing?: number;
      /** Format: float */
      rightPostswing?: number;
      /** Format: float */
      leftTimeDependence?: number;
      /** Format: float */
      rightTimeDependence?: number;
      leftAverageCut?: (number)[] | null;
      rightAverageCut?: (number)[] | null;
      gridAcc?: (number)[] | null;
      /** Format: float */
      fcAcc?: number;
    };
    AveragePosition: {
      /** Format: float */
      x?: number;
      /** Format: float */
      y?: number;
      /** Format: float */
      z?: number;
    };
    Badge: {
      /** Format: int32 */
      id?: number;
      description?: string | null;
      image?: string | null;
      link?: string | null;
    };
    Ban: {
      /** Format: int32 */
      id?: number;
      playerId?: string | null;
      bannedBy?: string | null;
      banReason?: string | null;
      /** Format: int32 */
      timeset?: number;
      /** Format: int32 */
      duration?: number;
    };
    BanReturn: {
      reason?: string | null;
      /** Format: int32 */
      timeset?: number;
      /** Format: int32 */
      duration?: number;
    };
    Clan: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      color?: string | null;
      icon?: string | null;
      tag?: string | null;
      leaderID?: string | null;
      description?: string | null;
      bio?: string | null;
      /** Format: int32 */
      playersCount?: number;
      /** Format: float */
      pp?: number;
      /** Format: float */
      averageRank?: number;
      /** Format: float */
      averageAccuracy?: number;
      players?: (components["schemas"]["Player"])[] | null;
      requests?: (components["schemas"]["User"])[] | null;
      banned?: (components["schemas"]["User"])[] | null;
    };
    ClanResponse: {
      /** Format: int32 */
      id?: number;
      tag?: string | null;
      color?: string | null;
    };
    ClanResponseWithMetadata: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["Clan"])[] | null;
    };
    ClanReturn: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      color?: string | null;
      icon?: string | null;
      tag?: string | null;
      leaderID?: string | null;
      /** Format: int32 */
      playersCount?: number;
      /** Format: float */
      pp?: number;
      /** Format: float */
      averageRank?: number;
      /** Format: float */
      averageAccuracy?: number;
      players?: (string)[] | null;
      pendingInvites?: (string)[] | null;
    };
    CompactLeaderboard: {
      songHash?: string | null;
      /** Format: int32 */
      difficulty?: number;
    };
    CompactScore: {
      /** Format: int32 */
      baseScore?: number;
      /** Format: int32 */
      modifiedScore?: number;
      /** Format: int32 */
      maxCombo?: number;
      /** Format: int32 */
      missedNotes?: number;
      /** Format: int32 */
      badCuts?: number;
      hmd?: components["schemas"]["HMD"];
      /** Format: int32 */
      epochTime?: number;
    };
    CompactScoreResponse: {
      score?: components["schemas"]["CompactScore"];
      leaderboard?: components["schemas"]["CompactLeaderboard"];
    };
    CompactScoreResponseResponseWithMetadata: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["CompactScoreResponse"])[] | null;
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    ControllerEnum: 0 | 1 | 2 | 4 | 8 | 16 | 33 | 34 | 35 | 37 | 44 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 128 | 256;
    DiffModResponse: {
      difficultyName?: string | null;
      modeName?: string | null;
      /** Format: float */
      stars?: number | null;
      status?: components["schemas"]["DifficultyStatus"];
      /** Format: int32 */
      type?: number;
      votes?: (number)[] | null;
      modifierValues?: components["schemas"]["ModifiersMap"];
    };
    DifficultyDescription: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      value?: number;
      /** Format: int32 */
      mode?: number;
      difficultyName?: string | null;
      modeName?: string | null;
      status?: components["schemas"]["DifficultyStatus"];
      modifierValues?: components["schemas"]["ModifiersMap"];
      /** Format: int32 */
      nominatedTime?: number;
      /** Format: int32 */
      qualifiedTime?: number;
      /** Format: int32 */
      rankedTime?: number;
      /** Format: float */
      stars?: number | null;
      /** Format: int32 */
      type?: number;
      /** Format: float */
      njs?: number;
      /** Format: float */
      nps?: number;
      /** Format: int32 */
      notes?: number;
      /** Format: int32 */
      bombs?: number;
      /** Format: int32 */
      walls?: number;
      /** Format: int32 */
      maxScore?: number;
      /** Format: double */
      duration?: number;
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    DifficultyStatus: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    /**
     * Format: int32 
     * @enum {integer}
     */
    EndType: 0 | 1 | 2 | 3 | 4;
    EventPlayer: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      eventId?: number;
      name?: string | null;
      playerId?: string | null;
      country?: string | null;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      /** Format: float */
      pp?: number;
    };
    EventRanking: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      /** Format: int32 */
      endDate?: number;
      /** Format: int32 */
      playlistId?: number;
      image?: string | null;
      leaderboards?: (components["schemas"]["Leaderboard"])[] | null;
      players?: (components["schemas"]["EventPlayer"])[] | null;
    };
    EventResponse: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      /** Format: int32 */
      endDate?: number;
      /** Format: int32 */
      playlistId?: number;
      image?: string | null;
      /** Format: int32 */
      playerCount?: number;
      leader?: components["schemas"]["PlayerResponse"];
    };
    EventResponseResponseWithMetadata: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["EventResponse"])[] | null;
    };
    FailedScore: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      baseScore?: number;
      /** Format: int32 */
      modifiedScore?: number;
      /** Format: float */
      accuracy?: number;
      playerId?: string | null;
      /** Format: float */
      pp?: number;
      /** Format: float */
      weight?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      replay?: string | null;
      modifiers?: string | null;
      /** Format: int32 */
      badCuts?: number;
      /** Format: int32 */
      missedNotes?: number;
      /** Format: int32 */
      bombCuts?: number;
      /** Format: int32 */
      wallsHit?: number;
      /** Format: int32 */
      pauses?: number;
      fullCombo?: boolean;
      hmd?: components["schemas"]["HMD"];
      timeset?: string | null;
      player?: components["schemas"]["Player"];
      leaderboard?: components["schemas"]["Leaderboard"];
      error?: string | null;
    };
    FailedScoreResponseWithMetadata: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["FailedScore"])[] | null;
    };
    GraphResponse: {
      leaderboardId?: string | null;
      diff?: string | null;
      mode?: string | null;
      modifiers?: string | null;
      songName?: string | null;
      mapper?: string | null;
      /** Format: float */
      acc?: number;
      timeset?: string | null;
      /** Format: float */
      stars?: number;
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    HMD: 0 | 1 | 2 | 4 | 8 | 16 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 64 | 128 | 256;
    HitTracker: {
      /** Format: int32 */
      maxCombo?: number;
      /** Format: int32 */
      maxStreak?: number;
      /** Format: int32 */
      leftMiss?: number;
      /** Format: int32 */
      rightMiss?: number;
      /** Format: int32 */
      leftBadCuts?: number;
      /** Format: int32 */
      rightBadCuts?: number;
      /** Format: int32 */
      leftBombs?: number;
      /** Format: int32 */
      rightBombs?: number;
    };
    Leaderboard: {
      id?: string | null;
      songId?: string | null;
      song?: components["schemas"]["Song"];
      difficulty?: components["schemas"]["DifficultyDescription"];
      scores?: (components["schemas"]["Score"])[] | null;
      qualification?: components["schemas"]["RankQualification"];
      reweight?: components["schemas"]["RankUpdate"];
      /** Format: int64 */
      timestamp?: number;
      leaderboardGroup?: components["schemas"]["LeaderboardGroup"];
      changes?: (components["schemas"]["LeaderboardChange"])[] | null;
      playerStats?: (components["schemas"]["PlayerLeaderboardStats"])[] | null;
      events?: (components["schemas"]["EventRanking"])[] | null;
      /** Format: int32 */
      plays?: number;
      /** Format: int32 */
      positiveVotes?: number;
      /** Format: int32 */
      starVotes?: number;
      /** Format: int32 */
      negativeVotes?: number;
      /** Format: float */
      voteStars?: number;
    };
    LeaderboardChange: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      timeset?: number;
      playerId?: string | null;
      /** Format: float */
      oldRankability?: number;
      /** Format: float */
      oldStars?: number;
      /** Format: int32 */
      oldType?: number;
      /** Format: int32 */
      oldCriteriaMet?: number;
      oldModifiers?: components["schemas"]["ModifiersMap"];
      /** Format: float */
      newRankability?: number;
      /** Format: float */
      newStars?: number;
      /** Format: int32 */
      newType?: number;
      /** Format: int32 */
      newCriteriaMet?: number;
      newModifiers?: components["schemas"]["ModifiersMap"];
    };
    LeaderboardGroup: {
      /** Format: int32 */
      id?: number;
      leaderboards?: (components["schemas"]["Leaderboard"])[] | null;
    };
    LeaderboardGroupEntry: {
      id?: string | null;
      status?: components["schemas"]["DifficultyStatus"];
      /** Format: int64 */
      timestamp?: number;
    };
    LeaderboardGroupsRecalculationResult: {
      /** Format: int32 */
      total?: number;
    };
    LeaderboardInfoResponse: {
      id?: string | null;
      song?: components["schemas"]["Song"];
      difficulty?: components["schemas"]["DifficultyDescription"];
      /** Format: int32 */
      plays?: number;
      /** Format: int32 */
      positiveVotes?: number;
      /** Format: int32 */
      starVotes?: number;
      /** Format: int32 */
      negativeVotes?: number;
      /** Format: float */
      voteStars?: number;
      myScore?: components["schemas"]["ScoreResponseWithAcc"];
      qualification?: components["schemas"]["RankQualification"];
      reweight?: components["schemas"]["RankUpdate"];
    };
    LeaderboardInfoResponseResponseWithMetadata: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["LeaderboardInfoResponse"])[] | null;
    };
    LeaderboardResponse: {
      id?: string | null;
      song?: components["schemas"]["Song"];
      difficulty?: components["schemas"]["DifficultyDescription"];
      scores?: (components["schemas"]["ScoreResponse"])[] | null;
      changes?: (components["schemas"]["LeaderboardChange"])[] | null;
      qualification?: components["schemas"]["RankQualification"];
      reweight?: components["schemas"]["RankUpdate"];
      leaderboardGroup?: (components["schemas"]["LeaderboardGroupEntry"])[] | null;
      /** Format: int32 */
      plays?: number;
    };
    LeaderboardTimestampsRecalculationResult: {
      /** Format: int32 */
      total?: number;
      /** Format: int32 */
      failed?: number;
    };
    LeaderboardVoting: {
      /** Format: float */
      rankability?: number;
      /** Format: float */
      stars?: number;
      type?: (number)[] | null;
    };
    LeaderboardsInfoResponse: {
      id?: string | null;
      difficulty?: components["schemas"]["DifficultyDescription"];
      qualification?: components["schemas"]["RankQualification"];
      reweight?: components["schemas"]["RankUpdate"];
    };
    LeaderboardsResponse: {
      song?: components["schemas"]["Song"];
      leaderboards?: (components["schemas"]["LeaderboardsInfoResponse"])[] | null;
    };
    Metadata: {
      /** Format: int32 */
      itemsPerPage?: number;
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      total?: number;
    };
    MiniRankingPlayer: {
      name?: string | null;
      id?: string | null;
      country?: string | null;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      /** Format: float */
      pp?: number;
    };
    MiniRankingResponse: {
      global?: (components["schemas"]["MiniRankingPlayer"])[] | null;
      country?: (components["schemas"]["MiniRankingPlayer"])[] | null;
    };
    ModVersion: {
      version?: string | null;
      link?: string | null;
    };
    ModVersions: {
      pc?: components["schemas"]["ModVersion"];
      quest?: components["schemas"]["ModVersion"];
    };
    ModifiersMap: {
      /** Format: int32 */
      modifierId?: number;
      /** Format: float */
      da?: number;
      /** Format: float */
      fs?: number;
      /** Format: float */
      ss?: number;
      /** Format: float */
      sf?: number;
      /** Format: float */
      gn?: number;
      /** Format: float */
      na?: number;
      /** Format: float */
      nb?: number;
      /** Format: float */
      nf?: number;
      /** Format: float */
      no?: number;
      /** Format: float */
      pm?: number;
      /** Format: float */
      sc?: number;
      /** Format: float */
      sa?: number;
    };
    OculusUser: {
      name?: string | null;
      id?: string | null;
      avatar?: string | null;
      migrated?: boolean;
      migratedId?: string | null;
    };
    PatreonFeatures: {
      /** Format: int32 */
      id?: number;
      bio?: string | null;
      message?: string | null;
      leftSaberColor?: string | null;
      rightSaberColor?: string | null;
    };
    Player: {
      id?: string | null;
      name?: string | null;
      platform?: string | null;
      avatar?: string | null;
      country?: string | null;
      histories?: string | null;
      role?: string | null;
      /** Format: int32 */
      mapperId?: number;
      /** Format: float */
      pp?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      /** Format: float */
      lastWeekPp?: number;
      /** Format: int32 */
      lastWeekRank?: number;
      /** Format: int32 */
      lastWeekCountryRank?: number;
      banned?: boolean;
      inactive?: boolean;
      externalProfileUrl?: string | null;
      scoreStats?: components["schemas"]["PlayerScoreStats"];
      statsHistory?: components["schemas"]["PlayerStatsHistory"];
      clans?: (components["schemas"]["Clan"])[] | null;
      friends?: (components["schemas"]["PlayerFriends"])[] | null;
      badges?: (components["schemas"]["Badge"])[] | null;
      patreonFeatures?: components["schemas"]["PatreonFeatures"];
      profileSettings?: components["schemas"]["ProfileSettings"];
      changes?: (components["schemas"]["PlayerChange"])[] | null;
      history?: (components["schemas"]["PlayerScoreStatsHistory"])[] | null;
      eventsParticipating?: (components["schemas"]["EventPlayer"])[] | null;
      socials?: (components["schemas"]["PlayerSocial"])[] | null;
    };
    PlayerChange: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      timestamp?: number;
      playerId?: string | null;
      oldName?: string | null;
      newName?: string | null;
      oldCountry?: string | null;
      newCountry?: string | null;
      changer?: string | null;
    };
    PlayerFriends: {
      id?: string | null;
      friends?: (components["schemas"]["Player"])[] | null;
    };
    PlayerLeaderboardStats: {
      /** Format: int32 */
      id?: number;
      playerId?: string | null;
      type?: components["schemas"]["EndType"];
      /** Format: int32 */
      timeset?: number;
      /** Format: float */
      time?: number;
      /** Format: int32 */
      score?: number;
      replay?: string | null;
      oldScore?: components["schemas"]["Score"];
      leaderboardId?: string | null;
      leaderboard?: components["schemas"]["Leaderboard"];
    };
    PlayerLeaderboardStatsResponseWithMetadata: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["PlayerLeaderboardStats"])[] | null;
    };
    PlayerResponse: {
      id?: string | null;
      name?: string | null;
      platform?: string | null;
      avatar?: string | null;
      country?: string | null;
      /** Format: float */
      pp?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      role?: string | null;
      socials?: (components["schemas"]["PlayerSocial"])[] | null;
      patreonFeatures?: components["schemas"]["PatreonFeatures"];
      profileSettings?: components["schemas"]["ProfileSettings"];
      clans?: (components["schemas"]["ClanResponse"])[] | null;
    };
    PlayerResponseClanResponseWithMetadataAndContainer: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["PlayerResponse"])[] | null;
      container?: components["schemas"]["Clan"];
    };
    PlayerResponseFull: {
      id?: string | null;
      name?: string | null;
      platform?: string | null;
      avatar?: string | null;
      country?: string | null;
      /** Format: float */
      pp?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      role?: string | null;
      socials?: (components["schemas"]["PlayerSocial"])[] | null;
      patreonFeatures?: components["schemas"]["PatreonFeatures"];
      profileSettings?: components["schemas"]["ProfileSettings"];
      clans?: (components["schemas"]["ClanResponse"])[] | null;
      histories?: string | null;
      scoreStats?: components["schemas"]["PlayerScoreStats"];
      /** Format: float */
      lastWeekPp?: number;
      /** Format: int32 */
      lastWeekRank?: number;
      /** Format: int32 */
      lastWeekCountryRank?: number;
      eventsParticipating?: (components["schemas"]["EventPlayer"])[] | null;
      /** Format: int32 */
      mapperId?: number;
      banned?: boolean;
      inactive?: boolean;
      banDescription?: components["schemas"]["Ban"];
      externalProfileUrl?: string | null;
      history?: (components["schemas"]["PlayerScoreStatsHistory"])[] | null;
      badges?: (components["schemas"]["Badge"])[] | null;
      pinnedScores?: (components["schemas"]["ScoreResponseWithMyScore"])[] | null;
      changes?: (components["schemas"]["PlayerChange"])[] | null;
    };
    PlayerResponseWithFriends: {
      id?: string | null;
      name?: string | null;
      platform?: string | null;
      avatar?: string | null;
      country?: string | null;
      /** Format: float */
      pp?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      role?: string | null;
      socials?: (components["schemas"]["PlayerSocial"])[] | null;
      patreonFeatures?: components["schemas"]["PatreonFeatures"];
      profileSettings?: components["schemas"]["ProfileSettings"];
      clans?: (components["schemas"]["ClanResponse"])[] | null;
      friends?: (string)[] | null;
    };
    PlayerResponseWithStats: {
      id?: string | null;
      name?: string | null;
      platform?: string | null;
      avatar?: string | null;
      country?: string | null;
      /** Format: float */
      pp?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      role?: string | null;
      socials?: (components["schemas"]["PlayerSocial"])[] | null;
      patreonFeatures?: components["schemas"]["PatreonFeatures"];
      profileSettings?: components["schemas"]["ProfileSettings"];
      clans?: (components["schemas"]["ClanResponse"])[] | null;
      histories?: string | null;
      scoreStats?: components["schemas"]["PlayerScoreStats"];
      /** Format: float */
      lastWeekPp?: number;
      /** Format: int32 */
      lastWeekRank?: number;
      /** Format: int32 */
      lastWeekCountryRank?: number;
      eventsParticipating?: (components["schemas"]["EventPlayer"])[] | null;
    };
    PlayerResponseWithStatsResponseWithMetadata: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["PlayerResponseWithStats"])[] | null;
    };
    PlayerScoreStats: {
      /** Format: int32 */
      id?: number;
      /** Format: int64 */
      totalScore?: number;
      /** Format: int64 */
      totalUnrankedScore?: number;
      /** Format: int64 */
      totalRankedScore?: number;
      /** Format: int32 */
      lastScoreTime?: number;
      /** Format: int32 */
      lastUnrankedScoreTime?: number;
      /** Format: int32 */
      lastRankedScoreTime?: number;
      /** Format: float */
      averageRankedAccuracy?: number;
      /** Format: float */
      averageWeightedRankedAccuracy?: number;
      /** Format: float */
      averageUnrankedAccuracy?: number;
      /** Format: float */
      averageAccuracy?: number;
      /** Format: float */
      medianRankedAccuracy?: number;
      /** Format: float */
      medianAccuracy?: number;
      /** Format: float */
      topRankedAccuracy?: number;
      /** Format: float */
      topUnrankedAccuracy?: number;
      /** Format: float */
      topAccuracy?: number;
      /** Format: float */
      topPp?: number;
      /** Format: float */
      topBonusPP?: number;
      /** Format: float */
      peakRank?: number;
      /** Format: int32 */
      rankedPlayCount?: number;
      /** Format: int32 */
      unrankedPlayCount?: number;
      /** Format: int32 */
      totalPlayCount?: number;
      /** Format: float */
      averageRankedRank?: number;
      /** Format: float */
      averageWeightedRankedRank?: number;
      /** Format: float */
      averageUnrankedRank?: number;
      /** Format: float */
      averageRank?: number;
      /** Format: int32 */
      sspPlays?: number;
      /** Format: int32 */
      ssPlays?: number;
      /** Format: int32 */
      spPlays?: number;
      /** Format: int32 */
      sPlays?: number;
      /** Format: int32 */
      aPlays?: number;
      topPlatform?: string | null;
      topHMD?: components["schemas"]["HMD"];
      /** Format: int32 */
      dailyImprovements?: number;
      /** Format: int32 */
      authorizedReplayWatched?: number;
      /** Format: int32 */
      anonimusReplayWatched?: number;
      /** Format: int32 */
      watchedReplays?: number;
    };
    PlayerScoreStatsHistory: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      timestamp?: number;
      playerId?: string | null;
      /** Format: float */
      pp?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      /** Format: int64 */
      totalScore?: number;
      /** Format: int64 */
      totalUnrankedScore?: number;
      /** Format: int64 */
      totalRankedScore?: number;
      /** Format: int32 */
      lastScoreTime?: number;
      /** Format: int32 */
      lastUnrankedScoreTime?: number;
      /** Format: int32 */
      lastRankedScoreTime?: number;
      /** Format: float */
      averageRankedAccuracy?: number;
      /** Format: float */
      averageWeightedRankedAccuracy?: number;
      /** Format: float */
      averageUnrankedAccuracy?: number;
      /** Format: float */
      averageAccuracy?: number;
      /** Format: float */
      medianRankedAccuracy?: number;
      /** Format: float */
      medianAccuracy?: number;
      /** Format: float */
      topRankedAccuracy?: number;
      /** Format: float */
      topUnrankedAccuracy?: number;
      /** Format: float */
      topAccuracy?: number;
      /** Format: float */
      topPp?: number;
      /** Format: float */
      topBonusPP?: number;
      /** Format: float */
      peakRank?: number;
      /** Format: int32 */
      rankedPlayCount?: number;
      /** Format: int32 */
      unrankedPlayCount?: number;
      /** Format: int32 */
      totalPlayCount?: number;
      /** Format: float */
      averageRankedRank?: number;
      /** Format: float */
      averageWeightedRankedRank?: number;
      /** Format: float */
      averageUnrankedRank?: number;
      /** Format: float */
      averageRank?: number;
      /** Format: int32 */
      sspPlays?: number;
      /** Format: int32 */
      ssPlays?: number;
      /** Format: int32 */
      spPlays?: number;
      /** Format: int32 */
      sPlays?: number;
      /** Format: int32 */
      aPlays?: number;
      topPlatform?: string | null;
      topHMD?: components["schemas"]["HMD"];
      /** Format: int32 */
      dailyImprovements?: number;
      /** Format: int32 */
      replaysWatched?: number;
      /** Format: int32 */
      watchedReplays?: number;
    };
    PlayerSocial: {
      /** Format: int32 */
      id?: number;
      service?: string | null;
      link?: string | null;
      user?: string | null;
      userId?: string | null;
    };
    PlayerStatsHistory: {
      /** Format: int32 */
      id?: number;
      pp?: string | null;
      rank?: string | null;
      countryRank?: string | null;
      totalScore?: string | null;
      averageRankedAccuracy?: string | null;
      averageWeightedRankedAccuracy?: string | null;
      averageWeightedRankedRank?: string | null;
      topAccuracy?: string | null;
      topPp?: string | null;
      averageAccuracy?: string | null;
      medianAccuracy?: string | null;
      medianRankedAccuracy?: string | null;
      totalPlayCount?: string | null;
      rankedPlayCount?: string | null;
      replaysWatched?: string | null;
    };
    Playlist: {
      /** Format: int32 */
      id?: number;
      isShared?: boolean;
      link?: string | null;
      ownerId?: string | null;
    };
    PrevQualification: {
      /** Format: int32 */
      time?: number;
    };
    ProfileSettings: {
      /** Format: int32 */
      id?: number;
      bio?: string | null;
      message?: string | null;
      effectName?: string | null;
      profileAppearance?: string | null;
      /** Format: float */
      hue?: number | null;
      /** Format: float */
      saturation?: number | null;
      leftSaberColor?: string | null;
      rightSaberColor?: string | null;
    };
    QualificationChange: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      timeset?: number;
      playerId?: string | null;
      /** Format: float */
      oldRankability?: number;
      /** Format: float */
      oldStars?: number;
      /** Format: int32 */
      oldType?: number;
      /** Format: int32 */
      oldCriteriaMet?: number;
      oldCriteriaCommentary?: string | null;
      oldModifiers?: components["schemas"]["ModifiersMap"];
      /** Format: float */
      newRankability?: number;
      /** Format: float */
      newStars?: number;
      /** Format: int32 */
      newType?: number;
      /** Format: int32 */
      newCriteriaMet?: number;
      newCriteriaCommentary?: string | null;
      newModifiers?: components["schemas"]["ModifiersMap"];
    };
    RankQualification: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      timeset?: number;
      rtMember?: string | null;
      /** Format: int32 */
      criteriaTimeset?: number;
      /** Format: int32 */
      criteriaMet?: number;
      criteriaChecker?: string | null;
      criteriaCommentary?: string | null;
      mapperAllowed?: boolean;
      mapperId?: string | null;
      mapperQualification?: boolean;
      /** Format: int32 */
      approvalTimeset?: number;
      approved?: boolean;
      approvers?: string | null;
      modifiers?: components["schemas"]["ModifiersMap"];
      changes?: (components["schemas"]["QualificationChange"])[] | null;
    };
    RankUpdate: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      timeset?: number;
      rtMember?: string | null;
      keep?: boolean;
      /** Format: float */
      stars?: number;
      /** Format: int32 */
      type?: number;
      /** Format: int32 */
      criteriaMet?: number;
      criteriaCommentary?: string | null;
      finished?: boolean;
      modifiers?: components["schemas"]["ModifiersMap"];
      changes?: (components["schemas"]["RankUpdateChange"])[] | null;
    };
    RankUpdateChange: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      timeset?: number;
      playerId?: string | null;
      oldKeep?: boolean;
      /** Format: float */
      oldStars?: number;
      /** Format: int32 */
      oldType?: number;
      /** Format: int32 */
      oldCriteriaMet?: number;
      oldCriteriaCommentary?: string | null;
      oldModifiers?: components["schemas"]["ModifiersMap"];
      newKeep?: boolean;
      /** Format: float */
      newStars?: number;
      /** Format: int32 */
      newType?: number;
      /** Format: int32 */
      newCriteriaMet?: number;
      newCriteriaCommentary?: string | null;
      newModifiers?: components["schemas"]["ModifiersMap"];
    };
    RankVoting: {
      /** Format: int32 */
      scoreId?: number;
      playerId?: string | null;
      hash?: string | null;
      diff?: string | null;
      mode?: string | null;
      /** Format: float */
      rankability?: number;
      /** Format: float */
      stars?: number;
      /** Format: int32 */
      type?: number;
      /** Format: int32 */
      timeset?: number;
      feedbacks?: (components["schemas"]["VoterFeedback"])[] | null;
    };
    ReplayOffsets: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      frames?: number;
      /** Format: int32 */
      notes?: number;
      /** Format: int32 */
      walls?: number;
      /** Format: int32 */
      heights?: number;
      /** Format: int32 */
      pauses?: number;
    };
    SaverScoreResponse: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      baseScore?: number;
      /** Format: int32 */
      modifiedScore?: number;
      /** Format: float */
      accuracy?: number;
      /** Format: float */
      pp?: number;
      /** Format: int32 */
      rank?: number;
      modifiers?: string | null;
      leaderboardId?: string | null;
      timeset?: string | null;
      /** Format: int32 */
      timepost?: number;
      player?: string | null;
    };
    SaverScoreResponseResponseWithMetadata: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["SaverScoreResponse"])[] | null;
    };
    Score: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      baseScore?: number;
      /** Format: int32 */
      modifiedScore?: number;
      /** Format: float */
      accuracy?: number;
      playerId?: string | null;
      /** Format: float */
      pp?: number;
      /** Format: float */
      bonusPp?: number;
      qualification?: boolean;
      /** Format: float */
      weight?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      replay?: string | null;
      modifiers?: string | null;
      /** Format: int32 */
      badCuts?: number;
      /** Format: int32 */
      missedNotes?: number;
      /** Format: int32 */
      bombCuts?: number;
      /** Format: int32 */
      wallsHit?: number;
      /** Format: int32 */
      pauses?: number;
      fullCombo?: boolean;
      /** Format: int32 */
      maxCombo?: number;
      /** Format: float */
      fcAccuracy?: number;
      /** Format: float */
      fcPp?: number;
      hmd?: components["schemas"]["HMD"];
      controller?: components["schemas"]["ControllerEnum"];
      /** Format: float */
      accRight?: number;
      /** Format: float */
      accLeft?: number;
      timeset?: string | null;
      /** Format: int32 */
      timesetMig?: number;
      /** Format: int32 */
      timepost?: number;
      platform?: string | null;
      player?: components["schemas"]["Player"];
      leaderboardId?: string | null;
      leaderboard?: components["schemas"]["Leaderboard"];
      /** Format: int32 */
      authorizedReplayWatched?: number;
      /** Format: int32 */
      anonimusReplayWatched?: number;
      replayOffsets?: components["schemas"]["ReplayOffsets"];
      country?: string | null;
      scoreImprovement?: components["schemas"]["ScoreImprovement"];
      banned?: boolean;
      suspicious?: boolean;
      rankVoting?: components["schemas"]["RankVoting"];
      metadata?: components["schemas"]["ScoreMetadata"];
    };
    ScoreGraphTracker: {
      graph?: (number)[] | null;
    };
    ScoreImprovement: {
      /** Format: int32 */
      id?: number;
      timeset?: string | null;
      /** Format: int32 */
      score?: number;
      /** Format: float */
      accuracy?: number;
      /** Format: float */
      pp?: number;
      /** Format: float */
      bonusPp?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: float */
      accRight?: number;
      /** Format: float */
      accLeft?: number;
      /** Format: float */
      averageRankedAccuracy?: number;
      /** Format: float */
      totalPp?: number;
      /** Format: int32 */
      totalRank?: number;
      /** Format: int32 */
      badCuts?: number;
      /** Format: int32 */
      missedNotes?: number;
      /** Format: int32 */
      bombCuts?: number;
      /** Format: int32 */
      wallsHit?: number;
      /** Format: int32 */
      pauses?: number;
    };
    ScoreMetadata: {
      /** Format: int32 */
      id?: number;
      status?: components["schemas"]["ScoreStatus"];
      /** Format: int32 */
      priority?: number;
      description?: string | null;
      linkService?: string | null;
      linkServiceIcon?: string | null;
      link?: string | null;
    };
    ScoreResponse: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      baseScore?: number;
      /** Format: int32 */
      modifiedScore?: number;
      /** Format: float */
      accuracy?: number;
      playerId?: string | null;
      /** Format: float */
      pp?: number;
      /** Format: float */
      bonusPp?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      country?: string | null;
      /** Format: float */
      fcAccuracy?: number;
      /** Format: float */
      fcPp?: number;
      replay?: string | null;
      modifiers?: string | null;
      /** Format: int32 */
      badCuts?: number;
      /** Format: int32 */
      missedNotes?: number;
      /** Format: int32 */
      bombCuts?: number;
      /** Format: int32 */
      wallsHit?: number;
      /** Format: int32 */
      pauses?: number;
      fullCombo?: boolean;
      platform?: string | null;
      /** Format: int32 */
      maxCombo?: number;
      hmd?: components["schemas"]["HMD"];
      controller?: components["schemas"]["ControllerEnum"];
      leaderboardId?: string | null;
      timeset?: string | null;
      /** Format: int32 */
      timepost?: number;
      /** Format: int32 */
      replaysWatched?: number;
      player?: components["schemas"]["PlayerResponse"];
      scoreImprovement?: components["schemas"]["ScoreImprovement"];
      rankVoting?: components["schemas"]["RankVoting"];
      metadata?: components["schemas"]["ScoreMetadata"];
      offsets?: components["schemas"]["ReplayOffsets"];
    };
    ScoreResponseResponseWithMetadataAndSelection: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["ScoreResponse"])[] | null;
      selection?: components["schemas"]["ScoreResponse"];
    };
    ScoreResponseWithAcc: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      baseScore?: number;
      /** Format: int32 */
      modifiedScore?: number;
      /** Format: float */
      accuracy?: number;
      playerId?: string | null;
      /** Format: float */
      pp?: number;
      /** Format: float */
      bonusPp?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      country?: string | null;
      /** Format: float */
      fcAccuracy?: number;
      /** Format: float */
      fcPp?: number;
      replay?: string | null;
      modifiers?: string | null;
      /** Format: int32 */
      badCuts?: number;
      /** Format: int32 */
      missedNotes?: number;
      /** Format: int32 */
      bombCuts?: number;
      /** Format: int32 */
      wallsHit?: number;
      /** Format: int32 */
      pauses?: number;
      fullCombo?: boolean;
      platform?: string | null;
      /** Format: int32 */
      maxCombo?: number;
      hmd?: components["schemas"]["HMD"];
      controller?: components["schemas"]["ControllerEnum"];
      leaderboardId?: string | null;
      timeset?: string | null;
      /** Format: int32 */
      timepost?: number;
      /** Format: int32 */
      replaysWatched?: number;
      player?: components["schemas"]["PlayerResponse"];
      scoreImprovement?: components["schemas"]["ScoreImprovement"];
      rankVoting?: components["schemas"]["RankVoting"];
      metadata?: components["schemas"]["ScoreMetadata"];
      offsets?: components["schemas"]["ReplayOffsets"];
      /** Format: float */
      weight?: number;
      /** Format: float */
      accLeft?: number;
      /** Format: float */
      accRight?: number;
    };
    ScoreResponseWithMyScore: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      baseScore?: number;
      /** Format: int32 */
      modifiedScore?: number;
      /** Format: float */
      accuracy?: number;
      playerId?: string | null;
      /** Format: float */
      pp?: number;
      /** Format: float */
      bonusPp?: number;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      countryRank?: number;
      country?: string | null;
      /** Format: float */
      fcAccuracy?: number;
      /** Format: float */
      fcPp?: number;
      replay?: string | null;
      modifiers?: string | null;
      /** Format: int32 */
      badCuts?: number;
      /** Format: int32 */
      missedNotes?: number;
      /** Format: int32 */
      bombCuts?: number;
      /** Format: int32 */
      wallsHit?: number;
      /** Format: int32 */
      pauses?: number;
      fullCombo?: boolean;
      platform?: string | null;
      /** Format: int32 */
      maxCombo?: number;
      hmd?: components["schemas"]["HMD"];
      controller?: components["schemas"]["ControllerEnum"];
      leaderboardId?: string | null;
      timeset?: string | null;
      /** Format: int32 */
      timepost?: number;
      /** Format: int32 */
      replaysWatched?: number;
      player?: components["schemas"]["PlayerResponse"];
      scoreImprovement?: components["schemas"]["ScoreImprovement"];
      rankVoting?: components["schemas"]["RankVoting"];
      metadata?: components["schemas"]["ScoreMetadata"];
      offsets?: components["schemas"]["ReplayOffsets"];
      /** Format: float */
      weight?: number;
      /** Format: float */
      accLeft?: number;
      /** Format: float */
      accRight?: number;
      myScore?: components["schemas"]["ScoreResponse"];
      leaderboard?: components["schemas"]["LeaderboardResponse"];
    };
    ScoreResponseWithMyScoreResponseWithMetadata: {
      metadata?: components["schemas"]["Metadata"];
      data?: (components["schemas"]["ScoreResponseWithMyScore"])[] | null;
    };
    ScoreStatistic: {
      hitTracker?: components["schemas"]["HitTracker"];
      accuracyTracker?: components["schemas"]["AccuracyTracker"];
      winTracker?: components["schemas"]["WinTracker"];
      scoreGraphTracker?: components["schemas"]["ScoreGraphTracker"];
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    ScoreStatus: 0 | 1;
    Song: {
      id?: string | null;
      hash?: string | null;
      name?: string | null;
      description?: string | null;
      subName?: string | null;
      author?: string | null;
      mapper?: string | null;
      /** Format: int32 */
      mapperId?: number;
      coverImage?: string | null;
      downloadUrl?: string | null;
      /** Format: double */
      bpm?: number;
      /** Format: double */
      duration?: number;
      tags?: string | null;
      createdTime?: string | null;
      /** Format: int32 */
      uploadTime?: number;
      difficulties?: (components["schemas"]["DifficultyDescription"])[] | null;
    };
    User: {
      id?: string | null;
      player?: components["schemas"]["Player"];
      clanRequest?: (components["schemas"]["Clan"])[] | null;
      bannedClans?: (components["schemas"]["Clan"])[] | null;
      playlists?: (components["schemas"]["Playlist"])[] | null;
    };
    UserReturn: {
      player?: components["schemas"]["PlayerResponseFull"];
      clan?: components["schemas"]["ClanReturn"];
      ban?: components["schemas"]["BanReturn"];
      clanRequest?: (components["schemas"]["Clan"])[] | null;
      bannedClans?: (components["schemas"]["Clan"])[] | null;
      playlists?: (components["schemas"]["Playlist"])[] | null;
      friends?: (components["schemas"]["PlayerResponseFull"])[] | null;
      login?: string | null;
      migrated?: boolean;
      patreoned?: boolean;
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    VoteStatus: 1 | 2 | 3;
    VoterFeedback: {
      /** Format: int32 */
      id?: number;
      rtMember?: string | null;
      /** Format: float */
      value?: number;
    };
    WinTracker: {
      won?: boolean;
      /** Format: float */
      endTime?: number;
      /** Format: int32 */
      nbOfPause?: number;
      /** Format: float */
      jumpDistance?: number;
      /** Format: float */
      averageHeight?: number;
      averageHeadPosition?: components["schemas"]["AveragePosition"];
      /** Format: int32 */
      totalScore?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
